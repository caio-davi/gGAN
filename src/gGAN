#!/usr/bin/env python

import os
import sys
from sys import exit
import argparse
import shutil
sys.path.insert(1, 'data/')

def main():
    # parse args
    parser = argparse.ArgumentParser()
    parser.add_argument("cmd", help="Action to perform. Opitons: clear, run")
    parser.add_argument("--afd", help="The threshold for the Allelic Freqeuncy Distance. Options are: 0.07, 0.10, 0.21, SVM")
    parser.add_argument("--dim", help="Number of dimensions of the formated sample. Options are: 1 (Conv1D) or 2 (Conv2D)")
    parser.add_argument("--syn", type=bool, help="Run training+test with synthetic data.")
    args = parser.parse_args()

    enabled_models = ['0.07', '0.10', '0.21', 'SVM']
    enabled_dims = [1,2]

    if args.cmd == 'clear':
        print("[INFO] Deleting all previus results...")
        shutil.rmtree("./run/")
        exit()
#        clear_folders(./data/synthetic/labeled)
    elif args.cmd == 'run':

        import model
        import pre_processing

        # check model argument to make sure the right model is set if not then exit
        if args.afd in enabled_models:
            print("[INFO] Running GAN with a max allelic frequency proximity of:", args.afd)
        else:
            print("[ERROR] Invalid model set:", args.afd)
            exit()

        if not (float(args.dim) in enabled_dims):
            print("[ERROR] Invalid Dimension option:", args.dim)
            exit()
        
        afd = args.afd.replace(".", "")
        
        sys.path.insert(1, '/gGAN/src/models')

        if(str(afd) == 'SVM'):
            net_model = __import__('model_'+args.dim+'_007', globals(), locals(), 0)
        else:
            net_model = __import__('model_'+args.dim+'_'+afd, globals(), locals(), 0)


        if(args.syn):
            if(not pre_processing.check_current_sampling(afd)):
                print("[ERROR] Current synthetic data doesn't match [afd] option.", args.dim)
                exit()

            print("[INFO] Loading synthetic labeled data...")    
            labeled_dataset = model.load_real_labeled_samples('./data/synthetic/labeled')
        else:
            print("[INFO] Pre-Processing Data...")
            print("[INFO] Dimensions: ", args.dim)
            pre_processing.init(args.afd, args.dim)

            print("[INFO] Loading original labeled data...")
            labeled_dataset = model.load_real_labeled_samples('./data/labeled')
        
        print("[INFO] Loading original unlabeled data...")
        unlabeled_dataset = model.load_real_unlabeled_samples()

        # train
        print("[INFO] Training model...")
        model.train_instances(labeled_dataset, unlabeled_dataset, net_model)
        print("[DONE] Finished.")
    
    else:
        print("[ERROR] Invalid action.")


if __name__ == '__main__':
    main()